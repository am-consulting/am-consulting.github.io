`r paste(knit(text = c(get(paste0('knit_expanded',n1)),get(paste0('knit_expanded',n2)))), collapse = '\n')`

eval(parse(text = paste0('dygraphPlot', n, ' %>% ', ConsumptionTax)))
cat('<hr>')
eval(parse(text = paste0('dygraphPlot', n, ' %>% ', primeMinisterOfJapan_dygraph)))
cat('<hr>')
eval(parse(text = paste0('dygraphPlot', n, ' %>% ', boj_dygraph)))
cat('<hr>')
eval(parse(text = paste0('dygraphPlot', n, ' %>% ', event_dygraph_point,' %>%  ',event_dygraph_range)))
cat('<hr>')
eval(parse(text = paste0('dygraphPlot', n, ' %>% ', potus_dygraph)))
cat('<hr>')
eval(parse(text = paste0('dygraphPlot', n, ' %>% ', frb_dygraph)))
cat('<hr>')
eval(parse(text = paste0('dygraphPlot', n, ' %>% ', eventE_dygraph_point)))
cat('<hr>')

https://github.com/am-consulting/am-consulting.github.io/blob/1df2c1f62e3319a9804fa37488c8fe8252d0d796/R-olive-EmployedPersonByMajorIndustry.rmd

timeSeriesDF <- 
texDygraph <- vector()
for(iii in 2:ncol(timeSeriesDF)){
  fun_generateKnit(objDF = timeSeriesDF[,c(1,iii)], plotNum = iii, group = 0, barPlot = 0,
                   colors = RColorBrewer::brewer.pal(ncol(timeSeriesDF)-1, "Accent")[iii-1],
                   dygraphTitle = colnames(timeSeriesDF)[iii])
  texDygraph <- c(texDygraph, paste0('knit_expanded', iii))
}
`r paste(knitr::knit(text = sapply(texDygraph,get)), collapse = '\n')`

timeSeriesDF <- 
texDygraph <- vector()
cnt <- 0
for(iii in 2:ncol(timeSeriesDF)){
  obj <- 
    na.omit(timeSeriesDF[,c(1,iii)])
  obj$FittedCurve <-
    predict(loess(obj[,2] ~ as.numeric(obj[,1]),degree = 2))
  cnt <- cnt + 1
  fun_generateKnit(objDF = obj, 
                   plotNum = cnt, 
                   group = 0, 
                   colors = c('blue','red','green'), 
                   dygraphTitle = colnames(obj)[2])
  assign(paste0('knit_expanded', cnt),
         paste0("\n```{r warning=F, error=F, message=F, echo=F, results='asis'}\n\n",
                "eval(parse(text = paste0('dygraphPlot", cnt," %>% ', primeMinisterOfJapan_dygraph)))",
                "\n\ncat('<hr>')\n\n```"),envir = .GlobalEnv)
  texDygraph <- 
    c(texDygraph, paste0('knit_expanded', cnt))
}

library(RCurl)
fileName <- 
  'functionList.csv'
file0 <- 
  paste0('https://raw.githubusercontent.com/am-consulting/am-consulting.github.io/master/csv/',
         fileName)
functionList <-
  read.csv(file = file0,
           header = F,
           as.is = T,
           stringsAsFactors = F,
           fileEncoding = as.character(unlist(readr::guess_encoding(file0)[1])))
for(iii in 1:nrow(functionList)){
  script <- 
    getURL(paste0("https://raw.githubusercontent.com/am-consulting/am-consulting.github.io/master/", 
                  functionList[iii,1]),
           ssl.verifypeer = F)
  eval(parse(text = script))
}


```{r warning=F,error=F,message=F,echo=F,results='asis'}
out <- NULL
obj <- list()
for(sss in seq(length(sheetName))){
  obj[[sss]] <- 
    socialConsciousH28[,c(1,2,grep(gsub('\\(|\\)','',sheetName[sss]),
                                   gsub('\\(|\\)','',colnames(socialConsciousH28))))]
  if(sss == 1){colnames(obj[[sss]]) <- colnames(obj[[sss]])[c(1:6,10,7:9)]}
  knit_expanded <-
    paste0(
      "\n```{r results='asis',echo=F}\n\n",
      "fun_dataTable(obj = obj[[",sss,"]],dateFormat = 0,orderDirection = 'asc',leftcolumns = 2,title = paste0(",sss,",':',sheetName[",sss,"]))\n\n",
      "cat('<hr>')\n\n```"
    )
  out <- c(out, knit_expanded)
}
```

`r paste(knit(text = out), collapse = '\n')`


```{r warning=F,error=F,message=F,echo=F,results='hide'}
objColumn <- 2
fun_summaryByName(obj = na.omit(DepositInterestRate),objColumn = objColumn)
fun_outputMD(tags = '日本銀行,店頭表示金利',
             objDF = summaryByName,
             htmlName = htmlName,
             tableTitle = colnames(DepositInterestRate)[objColumn])
```

objRow <- which(apply(buf1,1,function(x)(length(grep('単位',x))))!=0)
objCol <- which(apply(buf1,2,function(x)(length(grep('単位',x))))!=0)

keyWord <- ''
objRow <- which(apply(buf1,1,function(x)(length(grep(keyWord,x,ignore.case = T))))!=0)
objCol <- which(apply(buf1,2,function(x)(length(grep(keyWord,x,ignore.case = T))))!=0)

# csv出力パート
scriptFile <- 'R-writeCSVtoFolder.r'
script <-
  RCurl::getURL(
    paste0("https://raw.githubusercontent.com/am-consulting/am-consulting.github.io/master/",
           scriptFile),
    ssl.verifypeer = F)
eval(parse(text = script))
fun_writeCSVtoFolder(objData = obj,dataType = 1,csvFileName = '')
# csv出力パート

returnList <-
      list('' = ,
           '' = ,
  	       '' = )
return(returnList)